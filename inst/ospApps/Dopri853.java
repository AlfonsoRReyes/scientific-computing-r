/*
 * The Dopri853 class was contributed to the Open Source Physics project by Andrei Goussev
* at St. Petersburg Technical University, Russia.
 */

//package org.opensourcephysics.manual.ch09;
import org.opensourcephysics.numerics.*;
/**
 * Title:        Dopri853
 * Description:  Core of Dorman Prince 8/5/3 (12 stages) ODE solver with variable step size.
 * @author     Andrei Goussev
 * @version 1.0
 */
public class Dopri853 extends ExplicitRKSolver implements ODEInterpolator {
  static final double[][] a = {
    {5.26001519587677318785587544488E-2},
    {1.97250569845378994544595329183E-2, 5.91751709536136983633785987549E-2},
    {2.95875854768068491816892993775E-2, 0, 8.87627564304205475450678981324E-2},
    {2.41365134159266685502369798665E-1, 0, -8.84549479328286085344864962717E-1, 9.24834003261792003115737966543E-1},
    {3.7037037037037037037037037037E-2, 0, 0, 1.70828608729473871279604482173E-1, 1.25467687566822425016691814123E-1},
    {3.7109375E-2, 0, 0, 1.70252211019544039314978060272E-1, 6.02165389804559606850219397283E-2, -1.7578125E-2},
    {3.70920001185047927108779319836E-2, 0, 0, 1.70383925712239993810214054705E-1, 1.07262030446373284651809199168E-1, -1.53194377486244017527936158236E-2, 8.27378916381402288758473766002E-3},
    {6.24110958716075717114429577812E-1, 0, 0, -3.36089262944694129406857109825E0, -8.68219346841726006818189891453E-1, 2.75920996994467083049415600797E1, 2.01540675504778934086186788979E1, -4.34898841810699588477366255144E1},
    {4.77662536438264365890433908527E-1, 0, 0, -2.48811461997166764192642586468E0, -5.90290826836842996371446475743E-1, 2.12300514481811942347288949897E1, 1.52792336328824235832596922938E1, -3.32882109689848629194453265587E1, -2.03312017085086261358222928593E-2},
    {-9.3714243008598732571704021658E-1, 0, 0, 5.18637242884406370830023853209E0, 1.09143734899672957818500254654E0, -8.14978701074692612513997267357E0, -1.85200656599969598641566180701E1, 2.27394870993505042818970056734E1, 2.49360555267965238987089396762E0, -3.0467644718982195003823669022E0},
    {2.27331014751653820792359768449E0, 0, 0, -1.05344954667372501984066689879E1, -2.00087205822486249909675718444E0, -1.79589318631187989172765950534E1, 2.79488845294199600508499808837E1, -2.85899827713502369474065508674E0, -8.87285693353062954433549289258E0, 1.23605671757943030647266201528E1, 6.43392746015763530355970484046E-1}
  };
  static final double[] b = {5.42937341165687622380535766363E-2, 0, 0, 0, 0, 4.45031289275240888144113950566E0, 1.89151789931450038304281599044E0, -5.8012039600105847814672114227E0, 3.1116436695781989440891606237E-1, -1.52160949662516078556178806805E-1, 2.01365400804030348374776537501E-1, 4.47106157277725905176885569043E-2};

  static final double[] er3 = {-1.898007540724076157147023288760e-01, 0, 0, 0, 0, 4.45031289275240888144113950566e+00, 1.89151789931450038304281599044e+00, -5.8012039600105847814672114227e+00, -4.22682321323791962932445679177e-01, -1.52160949662516078556178806805e-01, 2.01365400804030348374776537501e-01, 2.26517921983608258118062039631e-02};
  static final double[] er5 = {0.1312004499419488073250102996E-01, 0, 0, 0, 0, -0.1225156446376204440720569753E+01, -0.4957589496572501915214079952E+00, 0.1664377182454986536961530415E+01, -0.3503288487499736816886487290E+00, 0.3341791187130174790297318841E+00, 0.8192320648511571246570742613E-01, -0.2235530786388629525884427845E-01};

  static final double[][] aDense = {
    {5.61675022830479523392909219681E-2, 0, 0, 0, 0, 0, 2.53500210216624811088794765333E-1, -2.46239037470802489917441475441E-1, -1.24191423263816360469010140626E-1, 1.5329179827876569731206322685E-1, 8.20105229563468988491666602057E-3, 7.56789766054569976138603589584E-3, -8.298E-3},
    {3.18346481635021405060768473261E-2, 0, 0, 0, 0, 2.83009096723667755288322961402E-2, 5.35419883074385676223797384372E-2, -5.49237485713909884646569340306E-2, 0, 0, -1.08347328697249322858509316994E-4, 3.82571090835658412954920192323E-4, -3.40465008687404560802977114492E-4, 1.41312443674632500278074618366E-1},
    {-4.28896301583791923408573538692E-1, 0, 0, 0, 0, -4.69762141536116384314449447206E0, 7.68342119606259904184240953878E0, 4.06898981839711007970213554331E0, 3.56727187455281109270669543021E-1, 0, 0, 0, -1.39902416515901462129418009734E-3, 2.9475147891527723389556272149E0, -9.15095847217987001081870187138E0}
  };

  static final double[][] dense = {
    {-0.84289382761090128651353491142E+01, 0, 0, 0, 0,  0.56671495351937776962531783590E+00, -0.30689499459498916912797304727E+01,  0.23846676565120698287728149680E+01,  0.21170345824450282767155149946E+01, -0.87139158377797299206789907490E+00,  0.22404374302607882758541771650E+01,  0.63157877876946881815570249290E+00, -0.88990336451333310820698117400E-01,  0.18148505520854727256656404962E+02, -0.91946323924783554000451984436E+01, -0.44360363875948939664310572000E+01},
    { 0.10427508642579134603413151009E+02, 0, 0, 0, 0,  0.24228349177525818288430175319E+03,  0.16520045171727028198505394887E+03, -0.37454675472269020279518312152E+03, -0.22113666853125306036270938578E+02,  0.77334326684722638389603898808E+01, -0.30674084731089398182061213626E+02, -0.93321305264302278729567221706E+01,  0.15697238121770843886131091075E+02, -0.31139403219565177677282850411E+02, -0.93529243588444783865713862664E+01,  0.35816841486394083752465898540E+02},
    { 0.19985053242002433820987653617E+02, 0, 0, 0, 0, -0.38703730874935176555105901742E+03, -0.18917813819516756882830838328E+03,  0.52780815920542364900561016686E+03, -0.11573902539959630126141871134E+02,  0.68812326946963000169666922661E+01, -0.10006050966910838403183860980E+01,  0.77771377980534432092869265740E+00, -0.27782057523535084065932004339E+01, -0.60196695231264120758267380846E+02,  0.84320405506677161018159903784E+02,  0.11992291136182789328035130030E+02},
    {-0.25693933462703749003312586129E+02, 0, 0, 0, 0, -0.15418974869023643374053993627E+03, -0.23152937917604549567536039109E+03,  0.35763911791061412378285349910E+03,  0.93405324183624310003907691704E+02, -0.37458323136451633156875139351E+02,  0.10409964950896230045147246184E+03,  0.29840293426660503123344363579E+02, -0.43533456590011143754432175058E+02,  0.96324553959188282948394950600E+02, -0.39177261675615439165231486172E+02, -0.14972683625798562581422125276E+03}
  };

  private double [][] coeffs;
  /**
   * Constructs the Dopri853core ODESolver for a system of ordinary  differential equations.
   *
   * @param ode the system of differential equations.
   */
  public Dopri853(ODE ode) {
    super(ode, a, b, 8, 12, 4);
    coeffs = new double [8][numEqn];
    initialize(stepSize);
  }

  /**
   * Estimates an error on the current iteration
   *
   * Important notice:
   * implicit input variable is double f[][]
   * @return then estimated error
   */
  protected double estimateError (){
    double truncErr = 0;
    double normErr3 = 0;
    double normErr5 = 0;
    double sk = 0;
    double atol = tolerance;
    double rtol = tolerance;
    double err = 0;

    // compute error rely upon Euclide norm
    for(int i = 0; i < numEqn; i++) {
      sk = atol + rtol * Math.max(Math.abs(state[i]), Math.abs(initialState[i]));
      truncErr = 0;
      for (int s = 0; s < nStages; s++) truncErr += er3[s]*intermidiateStages[s][i];
      normErr3 += Math.pow(truncErr / sk, 2);
      truncErr = 0;
      for (int s = 0; s < nStages; s++) truncErr += er5[s]*intermidiateStages[s][i];
      normErr5 += Math.pow(truncErr / sk, 2);
    }

    double deno = normErr5 + 0.01*normErr3;
    if (deno <= 0.0) deno = 1.0;
    err = Math.abs(stepSize)*normErr5*Math.sqrt(1.0 / (numEqn * deno));
    return err;
  }

/**
 * Continious output changes ode.state
 */

  public void doInterpolation(double remainder, double [] result){
    if (!interpolationIsValid) {
      interpolationIsValid = true;
      double [] st = new double[numEqn];
  // compute f[12] -> k13
     ode.getRate(state,intermidiateStages[12]);

  // compute f[13..15] -> k14..k16
      for(int s = 13; s < 16; s++) {
        for(int i = 0; i < numEqn; i++) {
          st[i] = initialState[i];                 // reset to the initial state
          for(int j = 0; j < s; j++) {
            st[i] += takenStepSize * aDense[s - 13][j] * intermidiateStages[j][i];
          }
        }
        ode.getRate(st, intermidiateStages[s]);                  // get the intermediate rates
      }

  // calculation coeffs - matrix.
      for (int i = 0; i < numEqn; i++){
        coeffs[0][i] = initialState[i]; // i'am not sure -> Y[i]
        coeffs[1][i] = state[i] - initialState[i];
        coeffs[2][i] = takenStepSize*intermidiateStages[0][i] - coeffs[1][i];
        coeffs[3][i] = coeffs[1][i] - takenStepSize*intermidiateStages[12][i] - coeffs[2][i];
        for (int k = 4; k < 8; k++){
          coeffs[k][i] = 0;
          for (int s = 0; s < 16; s++) coeffs[k][i] += takenStepSize*dense[k-4][s]*intermidiateStages[s][i];
        }
      }
    }
    double theta = remainder / takenStepSize;
    double theta1 = 1 - theta;
    if (result != state){
      for (int i = 0; i < numEqn; i ++)
        result[i] =  coeffs[0][i] + theta * (coeffs[1][i] + theta1 * (coeffs[2][i] +
                theta * (coeffs[3][i] + theta1 * (coeffs[4][i] +
                theta * (coeffs[5][i] + theta1 * (coeffs[6][i] +
                theta * coeffs[7][i]))))));
    } else
      System.err.println("Cann't interpolate to the internal state vector. Please call initialize(double, double []) method");
  }
}
